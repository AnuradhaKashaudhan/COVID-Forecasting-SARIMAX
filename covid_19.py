# -*- coding: utf-8 -*-
"""Covid_19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15QsGwFxC0eXeW_XqspUArwli6gydhZrl
"""

!pip uninstall -y numpy scipy statsmodels seaborn pmdarima
!pip install numpy==1.25.2 scipy==1.11.4 statsmodels==0.14.0 seaborn==0.12.2 pmdarima==2.0.4

#Import all necessary libraries again
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from pmdarima import auto_arima
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error
import warnings
warnings.filterwarnings("ignore")

print("âœ… All libraries imported successfully")

from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/COVID_DATADET/covid_19_clean_complete.csv'

import pandas as pd

file_path = '/content/drive/MyDrive/covid_19_clean_complete.csv'

# Load the CSV into a DataFrame
df = pd.read_csv(file_path)

# Display the first few rows
df.head()

# Check size and data types
print("Shape:", df.shape)
print("\nData Types:\n", df.dtypes)

df['Date'] = pd.to_datetime(df['Date'])

india_df = df[df['Country/Region'] == 'India']

# Group by Date and sum (in case there are multiple entries for same date)
india_df = india_df.groupby('Date')[['Confirmed', 'Deaths', 'Recovered', 'Active']].sum().reset_index()

# View last few entries
india_df.tail()

import matplotlib.pyplot as plt
plt.figure(figsize=(12, 6))
plt.plot(india_df['Date'], india_df['Confirmed'], label='Confirmed Cases')
plt.title('COVID-19 Confirmed Cases in India')
plt.xlabel('Date')
plt.ylabel('Number of Cases')
plt.legend()
plt.grid(True)
plt.show()

!pip install prophet

from prophet import Prophet

# We'll forecast confirmed cases
prophet_df = india_df[['Date', 'Confirmed']].rename(columns={
    'Date': 'ds',
    'Confirmed': 'y'
})

model = Prophet()
model.fit(prophet_df)

# Create future dataframe
future = model.make_future_dataframe(periods=60)

# Predict
forecast = model.predict(future)

# Plot trend, weekly & yearly seasonality
fig2 = model.plot_components(forecast)

# Merge actual and predicted values
comparison_df = forecast[['ds', 'yhat']].merge(
    prophet_df, on='ds', how='left'
)

# Drop rows where actual data is missing
comparison_df = comparison_df.dropna()

# Display a few rows
comparison_df.head()

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 5))
plt.plot(comparison_df['ds'], comparison_df['y'], label='Actual')
plt.plot(comparison_df['ds'], comparison_df['yhat'], label='Predicted')
plt.xlabel('Date')
plt.ylabel('Confirmed Cases')
plt.title('Actual vs Predicted Confirmed Cases in India')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Example: Forecast for Italy
italy_df = df[df['Country/Region'] == 'Italy'].groupby('Date')[['Confirmed']].sum().reset_index()

prophet_df_italy = italy_df.rename(columns={'Date': 'ds', 'Confirmed': 'y'})

model_italy = Prophet()
model_italy.fit(prophet_df_italy)

future_italy = model_italy.make_future_dataframe(periods=60)
forecast_italy = model_italy.predict(future_italy)

# Plot forecast
model_italy.plot(forecast_italy)

# Prepare data for forecasting deaths
deaths_df = india_df[['Date', 'Deaths']].copy()
deaths_df = deaths_df.rename(columns={'Date': 'ds', 'Deaths': 'y'})

# Fit model
deaths_model = Prophet()
deaths_model.fit(deaths_df)

# Forecast
future_deaths = deaths_model.make_future_dataframe(periods=60)
forecast_deaths = deaths_model.predict(future_deaths)

# Plot
deaths_model.plot(forecast_deaths)
plt.title('Forecast of COVID-19 Deaths in India')
plt.show()

# Prepare data for forecasting active cases
active_df = india_df[['Date', 'Active']].copy()
active_df = active_df.rename(columns={'Date': 'ds', 'Active': 'y'})

# Fit model
active_model = Prophet()
active_model.fit(active_df)

# Forecast
future_active = active_model.make_future_dataframe(periods=60)
forecast_active = active_model.predict(future_active)

# Plot
active_model.plot(forecast_active)
plt.title('Forecast of Active COVID-19 Cases in India')
plt.show()

# Exporting to CSV
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].to_csv('forecast_confirmed.csv', index=False)
forecast_deaths[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].to_csv('forecast_deaths.csv', index=False)
forecast_active[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].to_csv('forecast_active.csv', index=False)

from google.colab import files

files.download('forecast_confirmed.csv')
files.download('forecast_deaths.csv')
files.download('forecast_active.csv')

!pip install gradio

import gradio as gr
from prophet import Prophet

def forecast_covid(country, case_type):
    # Filter data
    country_df = df[df['Country/Region'] == country].groupby('Date')[[case_type]].sum().reset_index()
    country_df = country_df.rename(columns={'Date': 'ds', case_type: 'y'})

    # Fit and predict
    model = Prophet()
    model.fit(country_df)
    future = model.make_future_dataframe(periods=60)
    forecast = model.predict(future)

    # Plot
    fig = model.plot(forecast)
    return fig

# Country list from dataset
countries = sorted(df['Country/Region'].unique())

# Gradio Interface
interface = gr.Interface(
    fn=forecast_covid,
    inputs=[
        gr.Dropdown(choices=countries, label="Select Country", value="India"),
        gr.Dropdown(choices=['Confirmed', 'Deaths', 'Active'], label="Select Case Type", value="Confirmed")
    ],
    outputs="plot",
    title="COVID-19 Forecast Dashboard",
    description="Select a country and case type to view the forecast using Prophet model"
)

interface.launch()

import tempfile
import os

def forecast_covid(country, case_type, forecast_days):
    # Prepare the data
    country_df = df[df['Country/Region'] == country].groupby('Date')[[case_type]].sum().reset_index()
    country_df = country_df.rename(columns={'Date': 'ds', case_type: 'y'})

    # Train Prophet
    model = Prophet()
    model.fit(country_df)

    # Forecast
    future = model.make_future_dataframe(periods=int(forecast_days))
    forecast = model.predict(future)

    # Save forecast to CSV (only essential columns)
    result_df = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].copy()
    temp_dir = tempfile.gettempdir()
    csv_path = os.path.join(temp_dir, f"{country}_{case_type}_forecast.csv")
    result_df.to_csv(csv_path, index=False)

    # Plot
    fig = model.plot(forecast)

    return fig, csv_path

countries = df['Country/Region'].unique().tolist()

import gradio as gr
from prophet import Prophet
import pandas as pd
import matplotlib.pyplot as plt

interface = gr.Interface(
    fn=forecast_covid,
    inputs=[
        gr.Dropdown(choices=countries, label="Select Country", value="India"),
        gr.Dropdown(choices=['Confirmed', 'Deaths', 'Active'], label="Select Case Type", value="Confirmed"),
        gr.Slider(30, 180, step=10, label="Forecast Days", value=60)
    ],
    outputs=[
        gr.Plot(label="Forecast Plot"),
        gr.File(label="Download CSV")
    ],
    title="COVID-19 Forecast Dashboard",
    description="Forecast COVID-19 trends by country and case type using Prophet. Download the results as CSV."
)

interface.launch()

interface.launch(share=True)



import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import numpy as np

# Assuming df is your loaded DataFrame
# Filter for India only and group by Date
india_data = df[df['Country/Region'] == 'India'][['Date', 'Confirmed']]
india_data = india_data.groupby('Date')['Confirmed'].sum().reset_index()

# Convert 'Date' to datetime and set as index
india_data['Date'] = pd.to_datetime(india_data['Date'])
india_data.set_index('Date', inplace=True)

# Ensure daily frequency
india_data = india_data.asfreq('D')
india_data = india_data.fillna(method='ffill')  # Forward fill for any gaps

# Train-test split
train = india_data[:-30]
test = india_data[-30:]

# Fit SARIMAX model
model = SARIMAX(train, order=(1, 1, 1), seasonal_order=(1, 1, 1, 7))
results = model.fit(disp=False)

# Forecast
forecast = results.forecast(steps=30)

# Plot results
plt.figure(figsize=(12, 6))
plt.plot(train.index, train['Confirmed'], label='Training Data')
plt.plot(test.index, test['Confirmed'], label='Actual Data')
plt.plot(test.index, forecast, label='SARIMAX Forecast')
plt.title('COVID-19 Forecast - Confirmed Cases in India')
plt.xlabel('Date')
plt.ylabel('Confirmed Cases')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Evaluation
rmse = np.sqrt(mean_squared_error(test, forecast))
print(f"SARIMAX RMSE: {rmse:.2f}")

from statsmodels.tsa.arima.model import ARIMA

# Fit plain ARIMA model (non-seasonal)
arima_model = ARIMA(train, order=(1, 1, 1))
arima_results = arima_model.fit()

# Forecast using ARIMA
arima_forecast = arima_results.forecast(steps=30)

# Plot ARIMA results
plt.figure(figsize=(12, 6))
plt.plot(train.index, train['Confirmed'], label='Training Data')
plt.plot(test.index, test['Confirmed'], label='Actual Data')
plt.plot(test.index, arima_forecast, label='ARIMA Forecast')
plt.title('COVID-19 Forecast - ARIMA Model (Confirmed Cases in India)')
plt.xlabel('Date')
plt.ylabel('Confirmed Cases')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Evaluate ARIMA performance
arima_rmse = np.sqrt(mean_squared_error(test, arima_forecast))
print(f"ARIMA RMSE: {arima_rmse:.2f}")

print(f"SARIMAX RMSE: {rmse:.2f}")
print(f"ARIMA RMSE: {arima_rmse:.2f}")



